import os
from tkinter import *
from tkinter import filedialog, messagebox, ttk
from PIL import Image

class ImageConverter:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Converter")
        self.root.geometry("500x400")
        self.files = []

        # GUI Elements
        self.create_widgets()

    def create_widgets(self):
        Label(self.root, text="Select Images", font=("Helvetica", 14)).pack(pady=10)
        Button(self.root, text="Browse", command=self.select_files).pack()

        Label(self.root, text="Choose Output Format").pack(pady=5)
        self.format_var = StringVar(value="JPEG")
        formats = ["JPEG", "PNG", "BMP", "GIF"]
        OptionMenu(self.root, self.format_var, *formats).pack()

        Label(self.root, text="Resize (optional)").pack(pady=5)
        resize_frame = Frame(self.root)
        resize_frame.pack()
        Label(resize_frame, text="Width").grid(row=0, column=0)
        self.width_entry = Entry(resize_frame, width=5)
        self.width_entry.grid(row=0, column=1)
        Label(resize_frame, text="Height").grid(row=0, column=2)
        self.height_entry = Entry(resize_frame, width=5)
        self.height_entry.grid(row=0, column=3)

        Label(self.root, text="Compression Quality (JPEG only)").pack(pady=5)
        self.quality = Scale(self.root, from_=10, to=100, orient=HORIZONTAL)
        self.quality.set(85)
        self.quality.pack()

        Button(self.root, text="Convert Images", command=self.convert_images).pack(pady=20)
        self.progress = ttk.Progressbar(self.root, orient=HORIZONTAL, length=300, mode='determinate')
        self.progress.pack(pady=10)

    def select_files(self):
        self.files = filedialog.askopenfilenames(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp;*.gif")])
        if self.files:
            messagebox.showinfo("Files Selected", f"{len(self.files)} files selected.")

    def convert_images(self):
        if not self.files:
            messagebox.showwarning("No Files", "Please select image files to convert.")
            return

        out_format = self.format_var.get()
        out_dir = filedialog.askdirectory(title="Select Output Folder")
        if not out_dir:
            return

        try:
            width = int(self.width_entry.get()) if self.width_entry.get() else None
            height = int(self.height_entry.get()) if self.height_entry.get() else None
        except ValueError:
            messagebox.showerror("Invalid Size", "Width and Height must be integers.")
            return

        self.progress["maximum"] = len(self.files)
        self.progress["value"] = 0

        for index, file_path in enumerate(self.files):
            try:
                img = Image.open(file_path)
                if width and height:
                    img = img.resize((width, height))
                out_file = os.path.join(out_dir, f"{os.path.splitext(os.path.basename(file_path))[0]}.{out_format.lower()}")
                save_args = {}
                if out_format == "JPEG":
                    save_args["quality"] = self.quality.get()
                img.save(out_file, out_format, **save_args)
            except Exception as e:
                print(f"Error processing {file_path}: {e}")
            self.progress["value"] = index + 1
            self.root.update_idletasks()

        messagebox.showinfo("Conversion Complete", "Images converted successfully!")

if __name__ == "__main__":
    root = Tk()
    app = ImageConverter(root)
    root.mainloop()
